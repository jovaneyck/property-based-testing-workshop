using FluentAssertions;
using FsCheck;
using FsCheck.Xunit;

namespace MarsRover;

/// <summary>
/// This is where you can describe new properties for the Rover.
///
/// Link to FsCheck documentation: https://fscheck.github.io/FsCheck/
/// </summary>
public class RoverProperties
{
    [Property] //Note we use a special PropertyAttribute
    public void example_property_assertion(Rover r, Command c) => //All input arguments you declare for your properties will be randomly generated by the testing framework.
        r.Execute(c).Should().NotBe(r, "FIXME"); //you can use assertions in a property
    /*
    Example output of a failing property:

    FsCheck.Xunit.PropertyFailedException

    Falsifiable, after 1 test (0 shrinks) (StdGen (117936488,297098571)):
    Original:
    (Rover { Direction = E, Location = Location { X = 0, Y = 0 } }, F)
    */

    [Property]
    public Property example_property_predicate(Rover r) => //You can also have your Property methods return a property
        (r != null).ToProperty(); //ToProperty wraps any true/false predicate into a property

    [Property]
    public void AnyCommandChangesTheRover(Rover r, Command c) =>
        r.Execute(c).Should().NotBe(r);

    [Property]
    public void CanHandleAnySequenceOfCommandsWithoutBlowingUp(Rover r, Command[] c)
    {
        var act = () => r.Execute(c);
        act.Should().NotThrow();
    }

    [Property]
    public void TurnsAreInverse(Rover r)
    {
        r.Execute(Command.R).Execute(Command.L).Should().Be(r);
        r.Execute(Command.L).Execute(Command.R).Should().Be(r);
    }

    [Property]
    public void ForwardBackAreInverse(Rover r)
    {
        r.Execute(Command.F).Execute(Command.B).Should().Be(r);
        r.Execute(Command.B).Execute(Command.F).Should().Be(r);
    }

    public enum Turn { LeftTurn, RightTurn }

    [Property]
    public void TurningNeverChangesLocation(Rover r, Turn[] turns)
    {
        var commands = turns.Select(_ => _ switch
        {
            Turn.LeftTurn => Command.L,
            Turn.RightTurn => Command.R,
            _ => throw new ArgumentOutOfRangeException(nameof(_), _, null)
        }).ToArray();

        var turned = r.Execute(commands);
        turned.Location.Should().Be(r.Location);
    }

    [Property]
    public void Turning4TimesIsA360(Rover r)
    {
        r
            .Execute(Command.L)
            .Execute(Command.L)
            .Execute(Command.L)
            .Execute(Command.L)
            .Should()
            .Be(r);
        r
            .Execute(Command.R)
            .Execute(Command.R)
            .Execute(Command.R)
            .Execute(Command.R)
            .Should()
            .Be(r);
    }

    public enum Movement { Forward, Backward }

    [Property]
    public void ForwardBackNeverChangesDirection(Rover r, Movement[] movements)
    {
        var commands = movements.Select(_ => _ switch
        {
            Movement.Forward => Command.F,
            Movement.Backward => Command.B,
            _ => throw new ArgumentOutOfRangeException(nameof(_), _, null)
        }).ToArray();

        var moved = r.Execute(commands);
        moved.Direction.Should().Be(r.Direction);
    }
}